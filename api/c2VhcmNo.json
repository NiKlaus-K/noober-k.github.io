[{"title":"JS日期格式化","date":"2019-08-29T04:33:45.136Z","updated":"2019-08-29T04:35:22.091Z","content":"前言+在通过JavaScript中new Date()方法获取当前日期时，获取数据为Thu Aug 29 2019 10:51:06 GMT+0800 (中国标准时间） 。\n\n为实现不同的日期格式，需要将获取的date数据格式化，比如2019-08-29 10:51:06 \n\n在实现过程中会用到getFullYear()、d.getMonth()等日期处理方法\n\n同时发现如果月份、小时、分钟等为一位数的时候，只会显示为2019-8-29 10:8:6，为实现完整两位数显示此处可用slice方法解决\n\n关键字：日期格式化、slice()、join()\n\n\n方法\ndate.getFullYear()   获取年\n\ndate.getMonth()         获取月，为基于0的值（0表示一年中的第一月）\n\ndate.getDate()         获取日，一个月中的哪一日（从1–31）\n\ndate.getHours()         获取小时数\n\ndate.getMinutes()     获取分钟数\n\ndate.getSeconds()     获取秒数\n\narray.slice(begin,end)   可提取字符串的某个部分，并以新的字符串返回被提取的部分\n\n\nbegin表示提取起始处的索引，如果参数为负数，表示从倒数第几个开始提取\n\n\n\nslice(-2)表示提取倒数第二个元素到最后一个元素\n\nend表示提取终止处的索引，slice会提取原数组中索引从begin 到end的所有元素（包含begin，但不包含end）\n\nslice(1,4) 会提取原数组中从第二个元素开始一直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。\n\n其中begin和end皆默认为0\n\n\n\njoin(separator) 把数组中的所有元素转换为一个字符串\n\n\nseparator 可选，表示元素连接时添加的分隔符\n比如 [2019,08,29].join(&quot;-&quot;)，返回为”2019-08-29”；[2019,08,29].join(&quot;&quot;)，返回为”20190829”\n\n\n\n源码时间格式化函数123456789function format(d) &#123;    //参数d必须为Date对象，否则会提示getFullYear()等方法not a function    //可通过new Date(\"2018-8-8\")的方式将日期字符串转化为日期对象    return [d.getFullYear(), d.getMonth() + 1, d.getDate()].join('-')        \t+ ' '        \t+ [('0' + d.getHours()).slice(-2),            \t('0' + d.getMinutes()).slice(-2),            \t('0' + d.getSeconds()).slice(-2)].join(':')&#125;\n\n赋值12let date = format(new Date());    //格式化当前时间//输出：\"2019-8-29 12:27:39\"\n\n或者\n123let d = new Date(\"2018-08-08\");let date =  format(d);//输出：\"2018-8-8 08:00:00\"\n\n","plink":"http://noober-k.github.io/post/JS日期格式化/"},{"title":"文本溢出自动隐藏并显示省略号","date":"2019-08-23T10:13:30.743Z","updated":"2019-08-23T13:36:16.911Z","content":"文本溢出自动隐藏并显示省略号前言\n主要实现单行文本和多行文本的超出部分自动隐藏，并显示省略号\n关键字：overflow \n\nCSS属性\noverflow:hidden; （超出的文本隐藏）\ntext-overflow:ellipsis; （溢出用省略号显示 ）\nwhite-space:nowrap;（ 溢出不换行）\n\n单行文本实现效果展示我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。\n\nCSS源码1234567891011&lt;style&gt;    .text-ellipsis&#123;        display: inlin-block;        /* 溢出的文本隐藏 */        overflow: hidden;        /* 溢出用省略号显示 */        text-overflow: ellipsis;        /* 溢出不换行 */        white-space: nowrap;     &#125;&lt;/style&gt;\n\n多行文本实现效果展示我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。我是文本溢出自动隐藏。\n\nCSS源码123456789101112131415&lt;style&gt;     .text-ellipsis&#123;        width: 400px;        /* 溢出的文本隐藏 */        overflow:hidden;         /* 溢出用省略号显示 */        text-overflow:ellipsis;        /* 将对象作为弹性伸缩盒子模型显示 */        display:-webkit-box        /* 从上到下垂直排列子元素（设置伸缩盒子的子元素排列方式：vertical（竖排）orhorizontal（横排）） */        -webkit-box-orient:vertical;        /* 需要组合上面两个属性，表示显示的行数。 */        -webkit-line-clamp:2;     &#125;&lt;/style&gt;\n\n","plink":"http://noober-k.github.io/post/文本超出自动隐藏并显示省略号/"},{"title":"微信小程序之参数传递","date":"2019-08-20T23:15:25.424Z","updated":"2019-08-23T09:25:55.319Z","content":"前言\n在列表页面（ list ）实现列表渲染的前提下，通过点击不同卡片（ card ）时跳转到不同的详情页（ detail ）\n关键字：data-variable（variable代表变量名） wx.navigateTo（导航）\n\n源码list文件list.wxml123456&lt;view wx:for=\"&#123;&#123;worker&#125;&#125;\" wx:key=\"id\"&gt;    &lt;view data-id=\"&#123;&#123;item.id&#125;&#125;\" bindtap=\"click\" &gt;        &lt;view&gt;&#123;&#123; item.name &#125;&#125;&lt;/view&gt;        &lt;view&gt;&#123;&#123; item.introduce &#125;&#125;&lt;/view&gt;    &lt;/view&gt;&lt;/view&gt;\n\nlist.js1234567891011Page(&#123;    ....    click:function(e)&#123;        // console.log('点击事件的e：',e); //在事件的currentTarget.dataset里会获取到设置的data-variable变量此处为data-id        var workerId = e.currentTarget.dataset.id;        wx.navigateTo(&#123;            // 拼接url            url: '../worker/worker?title=worker&amp;id=' + workerId        &#125;)    &#125;,&#125;)\n\n\ndetail文件detail.js123456789101112Page(&#123;    ....    // 生命周期函数--监听页面加载    onLoad: function (options) &#123;        // 括号内的options可以改名的，无影响        console.log('options: ', options); //就是一个接收传递过来的参数的对象        this.setData(&#123;            id: options.id //给data里的id赋值    \t&#125;)    \t//console.log(this.data.id) //输出data的id，即为传过来的id值    &#125;,&#125;)\n\n\n实现效果\n\n","plink":"http://noober-k.github.io/post/微信小程序之传递参数/"},{"title":"HTML之表单详解","date":"2019-08-20T00:10:23.000Z","updated":"2019-08-19T20:56:33.675Z","content":"标签label1234&lt;div class=\"username\"&gt;    &lt;label for=\"username\"&gt;姓名&lt;/label&gt;    &lt;input id=\"username\"  type=\"text\" name=\"username\" value=\"Oliver\"&gt;&lt;/div&gt;\n\n\n label 是为了给一个input输入框前边加上可点击的说明文字\n label 里边的 for 和  input  里边的 id 连用，是为了：正常情况下，我要在这个输入框里边输入的话，我仅仅点击前边的说明文字是没反应的，我必须要点击这个输入框才能进入可输入模式。而这里的 label for  和 id  的连用就可以实现点击输入框前边的输入文字也可以进入输入模式。（注意：有 for 就必须有一个 id）\n\n选项checked以下哪种写法会导致 checkbox 被勾选：\n✅ &lt;input type=&quot;checkbox&quot; checked=false &gt; \n✅ &lt;input type=&quot;checkbox&quot; checked=true &gt; \n✅ &lt;input type=&quot;checkbox&quot; checked=&quot;&quot; &gt; \n✅ &lt;input type=&quot;checkbox&quot; checked&gt; \n❌ &lt;input type=&quot;checkbox&quot; &gt; \n\n   type=”radio”   ：单选框框\ntype=”checkbox”   ：复选框\n\n其他表单元素input 之   type=”file”  123&lt;div class=\"file\"&gt;  &lt;input type=\"file\" name=\"myfile\" accept=\"image/png\"&gt;&lt;/div&gt;\n\n\n用于文件上传\n   accept=”image/png”   accept 属性可以用来约束上传文件的格式，例如这里只能上传 image/png （但实际工作中，我们前端这样单方面的限制是不靠谱的，还需要后端也做相应的限制）。\n\ninput 之   type=”hidden”  1&lt;input type=\"hidden\" name=\"csrf\" value=\"123456oliver\"&gt;\n\n\n这一组代码在页面显示上没有任何效果，但点完“提交”后，这组代码里边的相关参数是会提交给后台的；\n这组代码的作用：\n暂存一些信息。比如在  里边埋了一个值，下次我们要用的时候，就直接可以定位到这个元素去获取它的值，获取到后就可以用了，但用户什么都不知道；\n由于可以暂存信息，那么在使用一些安全策略时，可以用到这个功能—— csrf 攻击。\n\n\n\n","plink":"http://noober-k.github.io/post/HTML之表单详解/"},{"title":"前端学习手册","date":"2019-08-19T00:15:27.000Z","updated":"2019-08-18T23:52:39.080Z","content":"JS篇数据类型\nJS基本数据类型和引用数据类型的区别及深浅拷贝  \nJS的第七种数据类型 \nJS中typeof与instanceof的区别\ntypeof null 为什么等于 object?\n为什么用Object.prototype.toString.call(obj)检测对象类型?\nJS显性数据类型转换和隐性数据类型转换\n理解Object.defineProperty的作用\n\nthis\n深入理解 js this 绑定 ( 无需死记硬背，尾部有总结和面试题解析 )\n前端基础进阶（五）：全方位解读this\nthis、apply、call、bind\nJavaScript中的call、apply、bind深入理解\n\n作用域链与闭包\nJavaScript中作用域和作用域链的简单理解（变量提升）\nJavaScript作用域、上下文、执行期上下文、作用域链、闭包\n前端基础进阶（四）：详细图解作用域链与闭包\nJavaScript 闭包入门（译文）\nJavaScript深入之闭包\nJavaScript 闭包\n浏览器是怎么看闭包的。\n\n原型与原型链\n白话原型和原型链\n前端基础进阶（九）：详解面向对象、构造函数、原型与原型链\n最详尽的 JS 原型与原型链终极详解，没有「可能是」。（一）\n最详尽的 JS 原型与原型链终极详解，没有「可能是」。（二）\n最详尽的 JS 原型与原型链终极详解，没有「可能是」。（三）\n\nJS执行底层\n前端基础进阶（一）：内存空间详细图解\n前端基础进阶（二）：执行上下文详细图解\n前端基础进阶（十二）：深入核心，详解事件循环机制\njs中的事件委托或是事件代理详解\n\nES6/ES7..\nES6 系列之 let 和 const\n前端基础进阶（十四）：es6常用基础合集\nES6 系列之箭头函数\nJavaScript初学者必看“箭头函数”\nPromise之你看得懂的Promise\nES6 系列之我们来聊聊 Promise\nPromise原理讲解 &amp;&amp; 实现一个Promise对象 (遵循Promise/A+规范)\nweb前端-js继承的理解\njs 深拷贝 vs 浅拷贝\n深拷贝的终极探索（90%的人都不知道）\n理解 async/await\nES6 系列之我们来聊聊 Async\n\n除此之外强烈推荐冴羽老师的ES6系列文章，深入骨髓的理解ES6中的核心。\nTypeScript\n深入理解 TypeScript\nTypeScript体系调研报告\nTypeScript 实践\n\nNode\nNode入门\n谈谈Node中的常见概念\nNode &amp; Express 入门指南\nExpress使用手记：核心入门\nnode进阶——之事无巨细手写koa源码\n带你走进 koa2 的世界（koa2 源码浅谈）\nfly.js—Node下增强的API\n\nHTML/CSS篇\nCSS 常见布局方式\n【整理】CSS布局方案\nCSS查漏补缺\n[布局概念] 关于CSS-BFC深入理解\n[译]这些 CSS 命名规范将省下你大把调试时间\nCSS知识总结\n前端开发规范：命名规范、html规范、css规范、js规范\n\nHTTP\nHTTP状态码（HTTP Status Code）\n面试 – 网络 HTTP\nHTTP最强资料大全\n我知道的HTTP请求\n\n性能&amp;优化篇\n浏览器的回流与重绘 (Reflow &amp; Repaint)\n浏览器缓存\n浏览器前端优化\n浏览器渲染引擎\nJavaScript 浏览器事件解析\n前端性能——监控起步\njavascript性能优化\n浏览器性能优化-渲染性能\n浏览器渲染过程与性能优化\n现代浏览器性能优化-CSS篇\n浏览器工作原理及web 性能优化\n\nWebpack篇\nwebpack详解\nWebpack4优化之路\nwebpack4之高级篇\nwebpack4-用之初体验，一起敲它十一遍\n📚免费的渐进式教程：Webpack4的16篇讲解和16份代码\n手写一个webpack4.0配置\n\nReact篇\n五星推荐的系列文章清单\n胡子大哈React.js 小书\nTypeScript 2.8下的终极React组件模式\n\n面试篇\nHTML&amp;&amp;css面试题\nExcuse me？这个前端面试在搞事！\n80% 应聘者都不及格的 JS 面试题\n2019年前端面试都聊啥？一起来看看\n一篇文章搞定前端面试\n如何轻松拿到淘宝前端 offer | 掘金技术征文\n腾讯前端面试篇（一）\n腾讯前端面试篇（二）\n\n","plink":"http://noober-k.github.io/post/前端学习手册/"},{"title":"Hello World","date":"2019-08-18T14:25:17.000Z","updated":"2019-08-18T23:52:33.456Z","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","plink":"http://noober-k.github.io/post/hello-world/"},{"title":"About Me","date":"2019-08-23T12:53:34.372Z","updated":"2019-08-23T12:53:34.372Z","content":"姓名：姜晓凯\nGitHub地址https://github.com/Noober-K\n学习经历：2013.09-2017.07   河海大学    信息管理与信息系统\n工作经历2018.04-2019.07  上海泛微网络科技有限公司——实施工程师\nContactEmail ：541657414@qq.com   发送邮件\nQQ 　：541657414\n微信   ：wx541657414\n\n致力于前端学习已达：天小时分钟秒\n\n    #summary{\n    text-align:center;\n    }\n    #summary span{\n        background-color:#5bc0de;\n        color:#fff;\n        padding:2px 4px;\n        border-radius:6px;\n    }\n\n\n\n\n","plink":"http://noober-k.github.io/about/"}]